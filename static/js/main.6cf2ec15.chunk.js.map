{"version":3,"sources":["logo.svg","components/PasswordGenerator.jsx","core/generators/BaseGen.js","core/generators/LettersGen.js","core/generators/NumbersGen.js","core/generators/SymbolsGen.js","core/PasswordGen.js","core/GeneratorsFactory.js","components/PasswordGeneratorContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","PasswordGenerator","suggestedPassword","length","onLengthChange","strategyList","activeStratefies","onStrategyChange","minLength","Container","maxWidth","Typography","variant","component","Box","display","justifyContent","Slider","value","onChange","_","newValue","step","min","max","map","strategyName","FormControlLabel","label","control","Checkbox","checked","indexOf","name","color","text","Button","BaseGen","LettersGen","chars","index","Math","floor","random","this","LettersGenUpperCased","toUpperCase","NumbersGen","SymbolsGen","PasswordGen","strategies","password","getRandomIndex","generate","STRATEGIES_NAME","NUMBERS","LETTERS","SYMBOLS","LETTERS_UPPER","STRATEGY_TO_GENERATORS_MAP","GeneratorsFactory","strategyNames","strategyInstance","Map","initStrategies","setStrategy","generator","create","values","Constructor","set","setGenerator","delete","ALL_STRATEGIES","Object","PasswordGeneratorContainer","state","Set","iniGenerator","setPassword","setState","setLength","removeStrategy","size","updateStrategies","generatePassword","addStrategy","add","toggleStrategy","has","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cf2ec15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {\n  Container,\n  Button,\n  Slider,\n  Typography,\n  FormControlLabel,\n  Checkbox,\n  Box,\n} from '@material-ui/core';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nexport const PasswordGenerator = ({\n  suggestedPassword,\n  length,\n  onLengthChange,\n  strategyList,\n  activeStratefies,\n  onStrategyChange,\n  minLength = 3,\n}) => {\n  return (\n    <Container maxWidth='md'>\n      <Typography variant='h3' component='h3'>\n        {suggestedPassword}\n      </Typography>\n      <Box display='flex' justifyContent='flex-start'>\n        <Typography>Length: {length}</Typography>\n      </Box>\n      <Box display='flex' justifyContent='flex-start'>\n        <Slider\n          value={length}\n          onChange={(_, newValue) => onLengthChange(newValue)}\n          step={1}\n          min={minLength}\n          max={40}\n        />\n      </Box>\n      <Box display='flex' justifyContent='flex-start'>\n        {strategyList.map((strategyName) => (\n          <FormControlLabel\n            label={strategyName}\n            control={\n              <Checkbox\n                checked={activeStratefies.indexOf(strategyName) !== -1}\n                onChange={() => onStrategyChange(strategyName)}\n                name={'strategy_' + strategyName}\n                color='primary'\n              />\n            }\n          />\n        ))}\n      </Box>\n      <Box display='flex' justifyContent='flex-end'>\n        <CopyToClipboard text={suggestedPassword}>\n          <Button variant='contained' color='primary'>Copy</Button>\n        </CopyToClipboard>\n      </Box>\n    </Container>\n  );\n};\n","export class BaseGen {\n  /**\n   * Abstract method\n   */\n  generate() {\n    throw '@@OVERRIDE@@';\n  }\n}","import { BaseGen } from './BaseGen';\n\nexport class LettersGen extends BaseGen {\n  static create() {\n    return new LettersGen();\n  }\n  chars = 'abcdefghijklmnopqrstuvwxyz';\n  /**\n   * @returns {string} single character\n   */\n  generate() {\n    const index = Math.floor(Math.random() * this.chars.length);\n    const symbol = this.chars[index];\n    return symbol;\n  }\n}\n\nexport class LettersGenUpperCased extends LettersGen {\n  static create() {\n    return new LettersGenUpperCased();\n  }\n\n  generate() {\n    return super.generate().toUpperCase();\n  }\n}\n","import { BaseGen } from './BaseGen';\n\nexport class NumbersGen extends BaseGen {\n  static create() {\n    return new NumbersGen();\n  }\n\n  generate() {\n    return Math.floor(Math.random() * 10);\n  }\n}\n","import { BaseGen } from './BaseGen';\n\nexport class SymbolsGen extends BaseGen {\n  static create() {\n    return new SymbolsGen();\n  }\n  \n  chars = '+-_=/;><)(*&^%$#@!,.?|{}[]';\n\n  generate() {\n    return this.chars[Math.floor(Math.random() * this.chars.length)];\n  }\n}","import { BaseGen } from './generators';\n\nexport class PasswordGen extends BaseGen {\n  static create(length, strategies) {\n    return new PasswordGen(length, strategies)\n  }\n  /**\n   * \n   * @param {number} length \n   * @param {Array<BaseGen>} strategies \n   */\n  constructor(length, strategies) {\n    super();\n    this.length = length;\n    this.strategies = strategies;\n  }\n\n  generate() {\n    let password = '';\n    while(password.length < this.length) {\n      const strategy = this.strategies[this.getRandomIndex()];\n      const char = strategy.generate();\n      password += char;\n    }\n\n    return password;\n  }\n\n  /**\n   * @private\n   * @returns {number}\n   */\n  getRandomIndex() {\n    return Math.floor(Math.random() * this.strategies.length);\n  }\n}","import { LettersGen, LettersGenUpperCased, NumbersGen, SymbolsGen } from './generators';\nimport { PasswordGen } from './PasswordGen';\n\nexport const STRATEGIES_NAME = {\n  NUMBERS: 'NUMBERS',\n  LETTERS: 'LETTERS',\n  SYMBOLS: 'SYMBOLS',\n  LETTERS_UPPER: 'LETTERS_UPPER'\n}\n\nconst STRATEGY_TO_GENERATORS_MAP = {\n  [STRATEGIES_NAME.NUMBERS]: NumbersGen,\n  [STRATEGIES_NAME.LETTERS]: LettersGen,\n  [STRATEGIES_NAME.SYMBOLS]: SymbolsGen,\n  [STRATEGIES_NAME.LETTERS_UPPER]: LettersGenUpperCased,\n}\n\nexport class GeneratorsFactory {\n  static create(length,  strategies) {\n    return new GeneratorsFactory(length, strategies);\n  }\n\n  /**\n   * Map<string, <BaseGen>>\n   */\n  strategyInstance = new Map();\n\n  constructor(length, strategyNames) {\n    this.length = length;\n    this.strategyNames = strategyNames;\n    this.initStrategies()\n  }\n\n  initStrategies() {\n    for(let strategyName of this.strategyNames) {\n      this.setStrategy(strategyName, STRATEGY_TO_GENERATORS_MAP[strategyName]);\n    }\n  }\n\n  setGenerator() {\n    this.generator = PasswordGen.create(this.length, [...this.strategyInstance.values()])\n  }\n\n  setStrategy(name, Constructor) {\n    this.strategyInstance.set(name, Constructor.create());\n    this.setGenerator();\n    return this;\n  }\n\n  removeStrategy(name) {\n    this.strategyInstance.delete(name);\n    this.setGenerator();\n    return this;\n  }\n\n  /**\n   * @return {string} password string\n   */\n  generate() {\n    return this.generator.generate()\n  }\n\n  setLength(length) {\n    this.length = length;\n    this.setGenerator();\n  }\n}","import React from 'react';\nimport { PasswordGenerator } from './PasswordGenerator';\nimport { STRATEGIES_NAME, GeneratorsFactory } from '../core';\n\nconst ALL_STRATEGIES = Object.values(STRATEGIES_NAME);\n\nclass PasswordGeneratorContainer extends React.Component {\n  state = {\n    suggestedPassword: '',\n    length: 5,\n    strategies: new Set(ALL_STRATEGIES),\n  };\n\n  componentDidMount() {\n    this.generatePassword();\n  }\n\n  iniGenerator = () => {\n    const { length, strategies } = this.state;\n    this.generator = GeneratorsFactory.create(length, strategies);\n  };\n\n  generatePassword() {\n    this.iniGenerator();\n    this.setPassword();\n  }\n\n  setPassword = () => {\n    const suggestedPassword = this.generator.generate();\n    this.setState((state) => ({ ...state, suggestedPassword }));\n  };\n\n  setLength = (length) => {\n    this.generator.setLength(length);\n    this.setState((state) => ({ ...state, length }), this.setPassword);\n  };\n\n  removeStrategy = (strategyName) => {\n    const { strategies } = this.state;\n    if (strategies.size === 1) {\n      return;\n    }\n    const updateStrategies = new Set(strategies);\n    updateStrategies.delete(strategyName);\n    this.setState(\n      (state) => ({ ...state, strategies: updateStrategies }),\n      this.generatePassword\n    );\n  };\n\n  addStrategy = (strategyName) => {\n    const strategies = new Set(this.state.strategies);\n    strategies.add(strategyName);\n    this.setState((state) => ({ ...state, strategies }), this.generatePassword);\n  };\n\n  toggleStrategy = (strategyName) => {\n    const { strategies } = this.state;\n    if (strategies.has(strategyName)) {\n      this.removeStrategy(strategyName);\n    } else {\n      this.addStrategy(strategyName);\n    }\n  };\n\n  render() {\n    const { suggestedPassword, length, strategies } = this.state;\n    return (\n      <PasswordGenerator\n        suggestedPassword={suggestedPassword}\n        onLengthChange={this.setLength}\n        onStrategyChange={this.toggleStrategy}\n        length={length}\n        strategyList={ALL_STRATEGIES}\n        activeStratefies={[...strategies]}\n      />\n    );\n  }\n}\n\nexport { PasswordGeneratorContainer as PasswordGenerator };\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { PasswordGenerator } from './components';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <PasswordGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}